rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection rules
    match /users/{userId} {
      // Users can read and write their own data
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow reading public user profiles (for leaderboards, friend search, etc.)
      allow read: if request.auth != null && resource.data.isPublic == true;
      
      // Username uniqueness validation
      allow create, update: if request.auth != null 
        && request.auth.uid == userId
        && validateUserData(request.resource.data)
        && isUsernameUnique(request.resource.data.username, userId);
    }
    
    // Friend requests collection
    match /friendRequests/{requestId} {
      // Users can read requests sent to them or from them
      allow read: if request.auth != null 
        && (resource.data.toUserId == request.auth.uid 
        || resource.data.fromUserId == request.auth.uid);
      
      // Users can create friend requests (from themselves)
      allow create: if request.auth != null 
        && request.resource.data.fromUserId == request.auth.uid
        && request.resource.data.fromUserId != request.resource.data.toUserId;
      
      // Users can delete requests sent to them or from them
      allow delete: if request.auth != null 
        && (resource.data.toUserId == request.auth.uid 
        || resource.data.fromUserId == request.auth.uid);
    }
    
    // Leaderboard data (read-only for most users)
    match /leaderboards/{entry} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Game statistics and achievements
    match /userStats/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Tournament data
    match /tournaments/{tournamentId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // Tournament creation/management rules
    }
    
    // Multiplayer game sessions
    match /multiplayerGames/{gameId} {
      allow read, write: if request.auth != null 
        && request.auth.uid in resource.data.players;
    }
    
    // Helper functions
    function validateUserData(data) {
      return data.keys().hasAll(['uid', 'username', 'displayName', 'email']) 
        && data.uid is string 
        && data.username is string 
        && data.username.size() >= 3 
        && data.username.size() <= 20
        && data.username.matches('^[a-zA-Z][a-zA-Z0-9_]*$')
        && data.displayName is string
        && (data.email is string || data.email == null)
        && data.isPublic is bool
        && data.highScore is number
        && data.totalGamesPlayed is number;
    }
    
    function isUsernameUnique(username, currentUserId) {
      // Check if username is already taken by another user
      return !exists(/databases/$(database)/documents/usernames/$(username)) 
        || get(/databases/$(database)/documents/usernames/$(username)).data.userId == currentUserId;
    }
  }
  
  // Username lookup collection for uniqueness enforcement
  match /databases/{database}/documents/usernames/{username} {
    // Only allow reading/writing for authenticated users
    allow read: if request.auth != null;
    
    // Allow creating username claim
    allow create: if request.auth != null 
      && request.resource.data.userId == request.auth.uid
      && request.resource.data.username == username;
    
    // Allow updating username claim (for username changes)
    allow update: if request.auth != null 
      && resource.data.userId == request.auth.uid
      && request.resource.data.userId == request.auth.uid;
    
    // Allow deleting username claim (when changing username)
    allow delete: if request.auth != null 
      && resource.data.userId == request.auth.uid;
  }
}